{"version":3,"sources":["components/AddCatagory.js","helpers/getGifts.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCatagory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cat","type","required","value","onChange","target","getGift","imgToFetch","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GifGrid","category","imgs","loading","state","setstate","useEffect","then","useFetchGifs","img","GiftExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,uBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAACO,GAAD,OAAUL,GAAV,mBAAwBK,OACtCJ,EAAc,KAId,UACI,oDACA,uBAAOK,KAAK,OAAOC,UAAQ,EAACC,MAAOR,EAAYS,SAdpC,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAC5BP,EAAcO,U,+BCNRG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACVC,EAFc,uDACJ,mCADI,cAEqDC,UAAUH,GAF/D,sBAGGI,MAAMF,GAHT,cAGdG,EAHc,gBAICA,EAASC,OAJV,uBAIbC,EAJa,EAIbA,KACDC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAYbM,GAZa,4CAAH,sDCARO,EAAe,SAAC,GAAiB,IAAhBb,EAAe,EAAfA,IAAIU,EAAW,EAAXA,MAE9B,OACI,sBAAKI,UAAW,sBAAhB,UACI,4BAAIJ,IACJ,qBAAKK,IAAKf,EAAKgB,IAAKN,QCCnBO,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAGVC,ECPY,SAACD,GACzB,MAA0BjC,mBAAS,CAC/BoB,KAAK,GACLe,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACN1B,EAAQqB,GACHM,MAAK,SAACL,GACHG,EAAS,CACLjB,KAAKc,EACLC,SAAQ,SAIrB,CAACF,IAEGG,EDVaI,CAAaP,GAA1Bb,KAGP,OACI,qCACI,mCAAMa,KAEN,qBAAKJ,UAAU,iBAAf,SAEQK,EAAKZ,KAAK,SAACmB,GAAD,OAAS,cAAC,EAAD,eAA+BA,GAAZA,EAAIjB,aEfjDkB,EAAgB,WACzB,IACA,EAAoC1C,mBADlB,IAClB,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAGA,OACI,gCACI,iDACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBACA,oBAAI8B,UAAU,OAAd,SACKc,EAAWrB,KAAI,SAACW,GACb,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCN1BW,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.a4741903.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCatagory = ({ setcategories }) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    //function update input text\r\n    const handleText = ({ target: { value } }) => {\r\n        setinputValue(value);\r\n    };\r\n\r\n    //function update input value in the list\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setcategories((cat) => [inputValue,...cat]);\r\n        setinputValue('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Add a new category</h2>\r\n            <input type='text' required value={inputValue} onChange={handleText} />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCatagory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired,\r\n};\r\n","//helper function than return a http request gifts\r\n\r\n export const getGift = async (imgToFetch) => {\r\n    const API_KEY = 'NteEFqYmRZK13pkumKPqO7RpeXscN39l'       \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURI(imgToFetch)}&limit=10`;\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n    const gifs = data.map((gif) => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.downsized_medium.url,\r\n        };\r\n    });\r\n    return gifs\r\n};","import React from 'react'\r\n\r\nexport const GiftGridItem = ({url,title}) => {\r\n    \r\n    return (\r\n        <div className= 'card glassmorphismo' >\r\n            <p>{title}</p>\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nimport { GiftGridItem } from './GiftGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const {data:imgs} = useFetchGifs(category)\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h2> {category}</h2>\r\n           \r\n            <div className='card-container'>\r\n                {\r\n                    imgs.map( (img) => <GiftGridItem key={img.id} {...img} />)\r\n                }   \r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useState,useEffect } from \"react\"\r\nimport { getGift } from \"../helpers/getGifts\"\r\n\r\n//custom hooks return state(data from api and boolen load)\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGift(category)\r\n            .then((imgs)=>{\r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                })\r\n            })\r\n        \r\n    }, [category])\r\n\r\n    return state\r\n   \r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { AddCatagory } from './components/AddCatagory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GiftExpertApp = () => {\r\n    const dataArray = [];\r\n    const [categories, setcategories] = useState(dataArray);\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h2>Gift Expert app</h2>\r\n            <AddCatagory setcategories={setcategories} />\r\n\r\n            <hr />\r\n            <ol className='list'>\r\n                {categories.map((category) => {\r\n                    return <GifGrid key={category} category={category} />;\r\n                })}\r\n            </ol>\r\n        </div>\r\n    );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}